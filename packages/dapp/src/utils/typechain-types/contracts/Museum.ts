/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface MuseumInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "curateExhibit"
      | "exhibits"
      | "owner"
      | "purchaseTicket"
      | "renounceOwnership"
      | "transferOwnership"
      | "usdcToken"
      | "verifyTicketOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ExhibitCurated"
      | "MuseumCreated"
      | "OwnershipTransferred"
      | "TicketPurchased"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "curateExhibit",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "exhibits", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "purchaseTicket",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "usdcToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "verifyTicketOwnership",
    values: [string, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "curateExhibit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exhibits", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "purchaseTicket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdcToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyTicketOwnership",
    data: BytesLike
  ): Result;
}

export namespace ExhibitCuratedEvent {
  export type InputTuple = [
    museumAddress: AddressLike,
    exhibitId: string,
    exhibitAddress: AddressLike
  ];
  export type OutputTuple = [
    museumAddress: string,
    exhibitId: string,
    exhibitAddress: string
  ];
  export interface OutputObject {
    museumAddress: string;
    exhibitId: string;
    exhibitAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MuseumCreatedEvent {
  export type InputTuple = [
    museumAddress: AddressLike,
    tokenAddress: AddressLike,
    ownerAddress: AddressLike
  ];
  export type OutputTuple = [
    museumAddress: string,
    tokenAddress: string,
    ownerAddress: string
  ];
  export interface OutputObject {
    museumAddress: string;
    tokenAddress: string;
    ownerAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TicketPurchasedEvent {
  export type InputTuple = [
    buyer: AddressLike,
    exhibit: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [buyer: string, exhibit: string, tokenId: bigint];
  export interface OutputObject {
    buyer: string;
    exhibit: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Museum extends BaseContract {
  connect(runner?: ContractRunner | null): Museum;
  waitForDeployment(): Promise<this>;

  interface: MuseumInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  curateExhibit: TypedContractMethod<
    [exhibitId: string, exhibit: AddressLike],
    [void],
    "nonpayable"
  >;

  exhibits: TypedContractMethod<[arg0: string], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  purchaseTicket: TypedContractMethod<
    [exhibitId: string, usdcAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  usdcToken: TypedContractMethod<[], [string], "view">;

  verifyTicketOwnership: TypedContractMethod<
    [exhibitId: string, user: AddressLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "curateExhibit"
  ): TypedContractMethod<
    [exhibitId: string, exhibit: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "exhibits"
  ): TypedContractMethod<[arg0: string], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "purchaseTicket"
  ): TypedContractMethod<
    [exhibitId: string, usdcAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "usdcToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "verifyTicketOwnership"
  ): TypedContractMethod<
    [exhibitId: string, user: AddressLike],
    [boolean],
    "view"
  >;

  getEvent(
    key: "ExhibitCurated"
  ): TypedContractEvent<
    ExhibitCuratedEvent.InputTuple,
    ExhibitCuratedEvent.OutputTuple,
    ExhibitCuratedEvent.OutputObject
  >;
  getEvent(
    key: "MuseumCreated"
  ): TypedContractEvent<
    MuseumCreatedEvent.InputTuple,
    MuseumCreatedEvent.OutputTuple,
    MuseumCreatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "TicketPurchased"
  ): TypedContractEvent<
    TicketPurchasedEvent.InputTuple,
    TicketPurchasedEvent.OutputTuple,
    TicketPurchasedEvent.OutputObject
  >;

  filters: {
    "ExhibitCurated(address,string,address)": TypedContractEvent<
      ExhibitCuratedEvent.InputTuple,
      ExhibitCuratedEvent.OutputTuple,
      ExhibitCuratedEvent.OutputObject
    >;
    ExhibitCurated: TypedContractEvent<
      ExhibitCuratedEvent.InputTuple,
      ExhibitCuratedEvent.OutputTuple,
      ExhibitCuratedEvent.OutputObject
    >;

    "MuseumCreated(address,address,address)": TypedContractEvent<
      MuseumCreatedEvent.InputTuple,
      MuseumCreatedEvent.OutputTuple,
      MuseumCreatedEvent.OutputObject
    >;
    MuseumCreated: TypedContractEvent<
      MuseumCreatedEvent.InputTuple,
      MuseumCreatedEvent.OutputTuple,
      MuseumCreatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "TicketPurchased(address,address,uint256)": TypedContractEvent<
      TicketPurchasedEvent.InputTuple,
      TicketPurchasedEvent.OutputTuple,
      TicketPurchasedEvent.OutputObject
    >;
    TicketPurchased: TypedContractEvent<
      TicketPurchasedEvent.InputTuple,
      TicketPurchasedEvent.OutputTuple,
      TicketPurchasedEvent.OutputObject
    >;
  };
}
