/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface ConversionContractInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "controller"
      | "convertUSDTtoUSDC"
      | "initialApprove"
      | "initialize"
      | "setStorageContract"
      | "storageContract"
      | "swapRouter"
      | "usdc"
      | "usdt"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Conversion"): EventFragment;

  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "convertUSDTtoUSDC",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialApprove",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setStorageContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "storageContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapRouter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "usdc", values?: undefined): string;
  encodeFunctionData(functionFragment: "usdt", values?: undefined): string;

  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "convertUSDTtoUSDC",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialApprove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setStorageContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storageContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapRouter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "usdc", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "usdt", data: BytesLike): Result;
}

export namespace ConversionEvent {
  export type InputTuple = [
    amountIn: BigNumberish,
    amountOut: BigNumberish,
    storageContract: AddressLike
  ];
  export type OutputTuple = [
    amountIn: bigint,
    amountOut: bigint,
    storageContract: string
  ];
  export interface OutputObject {
    amountIn: bigint;
    amountOut: bigint;
    storageContract: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ConversionContract extends BaseContract {
  connect(runner?: ContractRunner | null): ConversionContract;
  waitForDeployment(): Promise<this>;

  interface: ConversionContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  controller: TypedContractMethod<[], [string], "view">;

  convertUSDTtoUSDC: TypedContractMethod<
    [amountIn: BigNumberish, amountOutMinimum: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  initialApprove: TypedContractMethod<[], [void], "nonpayable">;

  initialize: TypedContractMethod<
    [
      _swapRouter: AddressLike,
      _controller: AddressLike,
      _usdt: AddressLike,
      _usdc: AddressLike,
      _storageContract: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  setStorageContract: TypedContractMethod<
    [_storageContract: AddressLike],
    [void],
    "nonpayable"
  >;

  storageContract: TypedContractMethod<[], [string], "view">;

  swapRouter: TypedContractMethod<[], [string], "view">;

  usdc: TypedContractMethod<[], [string], "view">;

  usdt: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "controller"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "convertUSDTtoUSDC"
  ): TypedContractMethod<
    [amountIn: BigNumberish, amountOutMinimum: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initialApprove"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _swapRouter: AddressLike,
      _controller: AddressLike,
      _usdt: AddressLike,
      _usdc: AddressLike,
      _storageContract: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setStorageContract"
  ): TypedContractMethod<[_storageContract: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "storageContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "swapRouter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "usdc"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "usdt"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "Conversion"
  ): TypedContractEvent<
    ConversionEvent.InputTuple,
    ConversionEvent.OutputTuple,
    ConversionEvent.OutputObject
  >;

  filters: {
    "Conversion(uint256,uint256,address)": TypedContractEvent<
      ConversionEvent.InputTuple,
      ConversionEvent.OutputTuple,
      ConversionEvent.OutputObject
    >;
    Conversion: TypedContractEvent<
      ConversionEvent.InputTuple,
      ConversionEvent.OutputTuple,
      ConversionEvent.OutputObject
    >;
  };
}
